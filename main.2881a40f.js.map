{"version":3,"sources":["scripts/main.js"],"names":["clickedColumn","tableArray","toNumber","numberAsString","resultString","slice","parseInt","split","join","sortByColumn","tableToSort","columnNumber","list","row","document","querySelector","querySelectorAll","head","i","length","push","cells","innerHTML","sort","a","b","prev","next","localeCompare","append","addEventListener","e","target","closest","clickedHeaderCells"],"mappings":";AAAA,aAEA,IAAIA,EAEEC,EAAa,GAEnB,SAASC,EAASC,GACZC,IAAAA,EAAeD,EAaZC,MAXmB,MAAtBD,EAAe,IACjBC,EAAeD,EAAeE,MAAM,GAGhC,iBADQC,SAASF,EAAaG,MAAM,KAAKC,KAAK,OAEhDJ,EAAeE,SAASF,EAAaG,MAAM,KAAKC,KAAK,OAE9CF,SAASF,KAClBA,EAAeE,SAASH,IAGnBC,EAGT,SAASK,EAAaC,EAAaC,GAK5B,IAJCC,IACAC,EADOC,SAASC,cAAc,SACnBC,iBAAiB,MAC5BC,EAAOH,SAASC,cAAc,SAE3BG,EAAI,EAAGA,EAAIL,EAAIM,OAAQD,IAC9BjB,EAAWmB,KAAKP,EAAIK,IAIlB,iBADQhB,EAASD,EAAW,GAAGoB,MAAMV,GAAcW,WAErDrB,EAAWsB,KAAK,SAACC,EAAGC,GAAMvB,OAAAA,EAASsB,EAAEH,MAAMV,GAAcW,WACvDpB,EAASuB,EAAEJ,MAAMV,GAAcW,aAEjCrB,EAAWsB,KAAK,SAASC,EAAGC,GACpBC,IAAAA,EAAOF,EAAEH,MAAMV,GAAcW,UAC7BK,EAAOF,EAAEJ,MAAMV,GAAcW,UAE5BI,OAAAA,EAAKE,cAAcD,KAI9BjB,EAAYmB,OAAOZ,GAEd,IAAA,IAAIC,EAAI,EAAGA,EAAIjB,EAAWkB,OAAQD,IACrCR,EAAYmB,OAAO5B,EAAWiB,IAIlCJ,SAASgB,iBAAiB,QAAS,SAAAC,GAC7B,IAACA,EAAEC,OAAOC,QAAQ,SACb,OAAA,EAKJ,IAFCC,IAAAA,EAAqBH,EAAEC,OAAOC,QAAQ,MAAMZ,MAEzCH,EAAI,EAAGA,EAAIgB,EAAmBf,OAAQD,IACzCgB,GAAAA,EAAmBhB,GAAGI,YAAcS,EAAEC,OAAOV,UAAW,CAC1DtB,EAAgBkB,EAChB,MAMJT,EAFqBK,SAASC,cAAc,SAEjBf","file":"main.2881a40f.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nlet clickedColumn;\n\nconst tableArray = [];\n\nfunction toNumber(numberAsString) {\n  let resultString = numberAsString;\n\n  if (numberAsString[0] === '$') {\n    resultString = numberAsString.slice(1);\n\n    if (typeof (parseInt(resultString.split(',').join('')))\n    === 'number') {\n      resultString = parseInt(resultString.split(',').join(''));\n    }\n  } else if (parseInt(resultString)) {\n    resultString = parseInt(numberAsString);\n  }\n\n  return resultString;\n}\n\nfunction sortByColumn(tableToSort, columnNumber) {\n  const list = document.querySelector('tbody');\n  const row = list.querySelectorAll('tr');\n  const head = document.querySelector('thead');\n\n  for (let i = 0; i < row.length; i++) {\n    tableArray.push(row[i]);\n  }\n\n  if (typeof (toNumber(tableArray[0].cells[columnNumber].innerHTML))\n  === 'number') {\n    tableArray.sort((a, b) => toNumber(a.cells[columnNumber].innerHTML)\n    - toNumber(b.cells[columnNumber].innerHTML));\n  } else {\n    tableArray.sort(function(a, b) {\n      const prev = a.cells[columnNumber].innerHTML;\n      const next = b.cells[columnNumber].innerHTML;\n\n      return prev.localeCompare(next);\n    });\n  }\n\n  tableToSort.append(head);\n\n  for (let i = 0; i < tableArray.length; i++) {\n    tableToSort.append(tableArray[i]);\n  }\n}\n\ndocument.addEventListener('click', e => {\n  if (!e.target.closest('thead')) {\n    return false;\n  }\n\n  const clickedHeaderCells = e.target.closest('tr').cells;\n\n  for (let i = 0; i < clickedHeaderCells.length; i++) {\n    if (clickedHeaderCells[i].innerHTML === e.target.innerHTML) {\n      clickedColumn = i;\n      break;\n    }\n  }\n\n  const initialTable = document.querySelector('table');\n\n  sortByColumn(initialTable, clickedColumn);\n});\n"]}